{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction PaceComponent_option_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 27);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r1, \" \");\n  }\n}\n\nexport let PaceComponent = /*#__PURE__*/(() => {\n  class PaceComponent {\n    constructor() {\n      // Time vars\n      this.timeHours = null;\n      this.timeMinutes = null;\n      this.timeSeconds = null; // Distance vars\n\n      this.distance = null;\n      this.distanceType = 'Miles';\n      this.distanceValue = 0; // Pace vars\n\n      this.paceHours = null;\n      this.paceMinutes = null;\n      this.paceSeconds = null;\n      this.paceType = 'miles'; // General vars\n\n      this.errorMessage = '';\n      this.calcType = ''; // Constants\n\n      this.HRS = 60 * 60; // sec in an hour\n\n      this.MINS = 60; // sec in a minute\n\n      this.SEPARATOR = '------------------';\n      this.DISTANCE_OPTIONS = ['Kilometers', 'Miles', 'Meters', 'Yards', this.SEPARATOR, 'Marathon', 'Half Marathon', '5miles', '8miles', '5k', '10k'];\n      this.METRIC_KM = ['Kilometers', '5k', '10k'];\n      this.US_MILES = ['Miles', '5miles', '8miles', 'Marathon', 'Half Marathon'];\n    }\n\n    ngOnInit() {\n      console.log('ngOnInit');\n    }\n\n    timeInSeconds() {\n      let tot = this.timeHours * this.HRS + this.timeMinutes * this.MINS + this.timeSeconds;\n      return tot;\n    }\n\n    paceInSeconds() {\n      let tot = this.paceHours * this.HRS + this.paceMinutes * this.MINS + this.paceSeconds;\n      return tot;\n    } // total time = pace * distance\n\n\n    calculateTotalTime() {\n      let factor = 0;\n      if (this.paceType == 'miles') switch (this.distanceType) {\n        case 'Kilometers':\n        case '5k':\n        case '10k':\n          factor = 0.625;\n          break;\n\n        case 'Meters':\n          factor = 0.000621371;\n          break;\n\n        case 'Yards':\n          factor = 1 / 1760;\n          break;\n\n        default:\n          factor = 1;\n      } else switch (this.distanceType) {\n        case 'Miles':\n        case '5miles':\n        case '8miles':\n          factor = 1.6;\n          break;\n\n        case 'Yards':\n          factor = 0.0009144;\n          break;\n\n        default:\n          factor = 1;\n      }\n      let tot = Math.round(this.paceInSeconds() * factor * this.distance); // update Time\n\n      let hrs = Math.trunc(tot / this.HRS);\n      let mins = Math.trunc((tot - hrs * this.HRS) / this.MINS);\n      let secs = Math.round(tot - hrs * this.HRS - mins * this.MINS);\n      console.log(hrs, mins, secs);\n      this.timeHours = hrs ? hrs : null;\n      this.timeMinutes = mins;\n      this.timeSeconds = secs; //this.distanceType = 'Miles';\n    } // pace = time/distance\n\n\n    calculatePace() {\n      if (this.validInput()) {\n        let pace = (this.timeHours * this.HRS + this.timeMinutes * this.MINS + this.timeSeconds) / this.convertDistance(this.distance);\n        let hrs = Math.trunc(pace / this.HRS);\n        let mins = Math.trunc((pace - hrs) / this.MINS);\n        let secs = Math.round(pace - hrs - mins * this.MINS);\n        console.log(hrs, mins, secs);\n        this.paceHours = hrs ? hrs : null;\n        this.paceMinutes = mins;\n        this.paceSeconds = secs;\n      }\n    }\n\n    convertDistance(distance) {\n      let factor = 1;\n      console.log(` ${this.distanceType} ${this.METRIC_KM.includes(this.distanceType)}`);\n\n      if (this.paceType == 'miles' && (this.US_MILES.includes(this.distanceType) || this.distanceType == 'Yards')) {\n        if (this.distanceType == 'Yards') {\n          return distance / 1760;\n        }\n\n        return distance;\n      }\n\n      if (this.paceType == 'miles' && (this.METRIC_KM.includes(this.distanceType) || this.distanceType == 'Meters')) {\n        if (this.distanceType == 'Meters') {\n          return 0.625 * distance / 1000;\n        }\n\n        return distance * 0.625;\n      }\n\n      if (this.paceType == 'km' && this.METRIC_KM.includes(this.distanceType) || this.distanceType == 'Meters') {\n        if (this.distanceType == 'Meters') {\n          return distance / 1000;\n        }\n\n        return distance;\n      }\n\n      return distance;\n    } // distance = tot time / pace\n\n\n    calculateDistance() {\n      // Set form distance to metric or US\n      if (this.paceType == 'per Mile') {\n        this.distanceType = 'Kilometers';\n      } else {\n        this.distanceType = 'Miles';\n      }\n\n      let totalTimeSecs = this.timeHours * this.HRS + this.timeMinutes * this.MINS + this.timeSeconds;\n      let paceTimeSecs = this.paceHours * this.HRS + this.paceMinutes * this.MINS + this.paceSeconds;\n      this.distance = totalTimeSecs / paceTimeSecs;\n    }\n\n    reset() {\n      this.timeReset();\n      this.distReset();\n      this.paceReset();\n      this.resetOther();\n    }\n\n    distReset() {\n      this.distance = null;\n      this.distanceType = 'Miles';\n      this.resetOther();\n    }\n\n    paceReset() {\n      this.paceHours = null;\n      this.paceMinutes = null;\n      this.paceSeconds = null;\n      this.paceType = 'miles';\n      this.resetOther();\n    }\n\n    timeReset() {\n      this.timeHours = null;\n      this.timeMinutes = null;\n      this.timeSeconds = null;\n      this.resetOther();\n    }\n\n    resetOther() {\n      this.calcType = '';\n      this.errorMessage = '';\n    }\n\n    validInput() {\n      let hasDist = !!this.distance;\n      let hasPace = !!(this.paceHours || this.paceMinutes || this.paceSeconds);\n      let hasTime = !!(this.timeSeconds || this.timeMinutes || this.timeHours);\n      console.log(`has dist= ${hasDist}, has pace= ${hasPace}, has time= ${hasTime}`);\n\n      if (!hasDist && !hasPace && !hasTime || // has nothing\n      hasDist && !hasPace && !hasTime || // only distance\n      !hasDist && hasPace && !hasTime || // only pace\n      !hasDist && !hasPace && hasTime // only time\n      ) {\n        this.errorMessage = 'Provide exactly 2 of distance, time or pace';\n        return false;\n      }\n\n      if (hasDist && hasTime && hasPace) {\n        this.errorMessage = 'Provide only 2 of distance, time or pace';\n        return false;\n      }\n\n      this.errorMessage = '';\n      return true;\n    }\n\n    typeOfCalculation() {\n      let calcType = '';\n\n      if (this.validInput()) {\n        if ((this.timeSeconds || this.timeMinutes || this.timeHours) && this.distance) {\n          calcType = 'Pace';\n        }\n\n        if ((this.timeSeconds || this.timeMinutes || this.timeHours) && this.paceHours || this.paceMinutes || this.paceSeconds) {\n          calcType = 'Distance';\n        }\n\n        if ((this.paceHours || this.paceMinutes || this.paceSeconds) && this.distance) {\n          calcType = 'Time';\n        }\n      }\n\n      this.calcType = calcType;\n      return calcType;\n    }\n\n    convertPace(event) {\n      console.log(event);\n      let paceTimeSecs = this.convertPace2Seconds();\n\n      if (paceTimeSecs) {\n        // convert to miles\n        if (event.target.value == 'km') {\n          let pace = paceTimeSecs * 0.625;\n          this.convertSeconds2Pace(pace);\n        } // convert to km\n        else {\n          let pace = paceTimeSecs * 1.6;\n          this.convertSeconds2Pace(pace);\n        }\n      }\n    }\n\n    convertSeconds2Pace(paceSecs) {\n      let hrs = Math.trunc(paceSecs / this.HRS);\n      let mins = Math.trunc((paceSecs - hrs) / this.MINS);\n      let secs = Math.round(paceSecs - hrs - mins * this.MINS);\n      console.log(hrs, mins, secs);\n      this.paceHours = hrs ? hrs : null;\n      this.paceMinutes = mins ? mins : null;\n      this.paceSeconds = secs;\n    }\n\n    convertPace2Seconds() {\n      let paceTimeSecs = this.paceHours * this.HRS + this.paceMinutes * this.MINS + this.paceSeconds;\n      return paceTimeSecs;\n    }\n\n    checkStandardDistances(event) {\n      console.log(event);\n      let distanceType = event.target.value; // dont override distance if a standard type is not selected\n\n      if (distanceType != 'Meters' && distanceType != 'Yards' && distanceType != 'Kilometers' && distanceType != 'Miles') this.distance = 0; // standard distances\n\n      if (distanceType == 'Marathon') this.distance = 26.2188;\n      if (distanceType == 'Half Marathon') this.distance = 26.2188 / 2;\n      if (distanceType == '5miles') this.distance = 5;\n      if (distanceType == '8miles') this.distance = 8;\n      if (distanceType == '5k') this.distance = 5;\n      if (distanceType == '10k') this.distance = 10;\n    }\n\n    calculate() {\n      switch (this.typeOfCalculation()) {\n        case 'Pace':\n          this.calculatePace();\n          break;\n\n        case 'Distance':\n          this.calculateDistance();\n          break;\n\n        case 'Time':\n          this.calculateTotalTime();\n      }\n    }\n\n  }\n\n  PaceComponent.ɵfac = function PaceComponent_Factory(t) {\n    return new (t || PaceComponent)();\n  };\n\n  PaceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PaceComponent,\n    selectors: [[\"pace\"]],\n    inputs: {\n      name: \"name\"\n    },\n    decls: 64,\n    vars: 23,\n    consts: [[1, \"container\"], [1, \"form-horizontal\"], [1, \"row-fluid\"], [1, \"span12\"], [1, \"control-group\"], [1, \"control-label\"], [1, \"calculate-reset\"], [\"id\", \"time-reset\", 3, \"click\"], [1, \"form-control\", \"form-control-sm\", 3, \"ngClass\"], [\"placeholder\", \"\", \"type\", \"number\", \"name\", \"time-hours\", \"min\", \"0\", \"max\", \"59\", 1, \"input-time-val\", 3, \"ngModel\", \"value\", \"ngModelChange\"], [\"type\", \"number\", \"name\", \"time-minutes\", \"min\", \"0\", \"max\", \"59\", 1, \"input-time-val\", 3, \"ngModel\", \"value\", \"ngModelChange\"], [\"type\", \"number\", \"name\", \"time-seconds\", \"min\", \"0\", \"max\", \"59\", 1, \"input-time-val\", 3, \"ngModel\", \"value\", \"ngModelChange\"], [\"id\", \"dist-reset\", 3, \"click\"], [\"type\", \"number\", \"name\", \"distance\", \"min\", \"0\", \"max\", \"10000\", 3, \"ngModel\", \"value\", \"ngModelChange\"], [\"name\", \"distance-type\", 1, \"pace-selectbox\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"pace-reset\", 3, \"click\"], [\"type\", \"number\", \"name\", \"pace-hours\", \"min\", \"0\", \"max\", \"59\", 1, \"input-time-val\", 3, \"ngModel\", \"value\", \"ngModelChange\"], [\"type\", \"number\", \"name\", \"pace-minutes\", \"min\", \"0\", \"max\", \"59\", 1, \"input-time-val\", 3, \"ngModel\", \"value\", \"ngModelChange\"], [\"type\", \"number\", \"name\", \"pace-seconds\", \"min\", \"0\", \"max\", \"59\", 1, \"input-time-val\", 3, \"ngModel\", \"value\", \"ngModelChange\"], [\"name\", \"pace-type\", 1, \"pace-selectbox\", 3, \"ngModel\", \"value\", \"ngModelChange\", \"change\"], [\"value\", \"km\"], [\"value\", \"miles\", \"selected\", \"\"], [1, \"errors\"], [\"id\", \"calc-pace\", \"type\", \"button\", 1, \"btn\", \"btn-warning\", 3, \"click\"], [\"id\", \"calc-reset\", 1, \"calculate-reset\"], [3, \"click\"], [3, \"value\"]],\n    template: function PaceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h3\");\n        i0.ɵɵtext(5, \"Calculator\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"div\", 4)(7, \"label\", 5);\n        i0.ɵɵtext(8, \"Time\");\n        i0.ɵɵelementStart(9, \"span\", 6)(10, \"a\", 7);\n        i0.ɵɵlistener(\"click\", function PaceComponent_Template_a_click_10_listener() {\n          return ctx.timeReset();\n        });\n        i0.ɵɵtext(11, \"Reset\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(12, \"div\", 8)(13, \"label\")(14, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_input_ngModelChange_14_listener($event) {\n          return ctx.timeHours = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(15, \"-hrs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"label\")(17, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_input_ngModelChange_17_listener($event) {\n          return ctx.timeMinutes = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(18, \"-min\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"label\")(20, \"input\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_input_ngModelChange_20_listener($event) {\n          return ctx.timeSeconds = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(21, \"-sec\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(22, \"div\", 4)(23, \"label\", 5);\n        i0.ɵɵtext(24, \"Distance \");\n        i0.ɵɵelementStart(25, \"span\", 6)(26, \"a\", 12);\n        i0.ɵɵlistener(\"click\", function PaceComponent_Template_a_click_26_listener() {\n          return ctx.distReset();\n        });\n        i0.ɵɵtext(27, \"Reset\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(28, \"div\", 8)(29, \"label\")(30, \"input\", 13);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_input_ngModelChange_30_listener($event) {\n          return ctx.distance = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"select\", 14);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_select_ngModelChange_31_listener($event) {\n          return ctx.distanceType = $event;\n        })(\"change\", function PaceComponent_Template_select_change_31_listener($event) {\n          return ctx.checkStandardDistances($event);\n        });\n        i0.ɵɵtemplate(32, PaceComponent_option_32_Template, 2, 2, \"option\", 15);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(33, \"div\", 4)(34, \"label\", 5);\n        i0.ɵɵtext(35, \"Pace\");\n        i0.ɵɵelementStart(36, \"span\", 6)(37, \"a\", 16);\n        i0.ɵɵlistener(\"click\", function PaceComponent_Template_a_click_37_listener() {\n          return ctx.paceReset();\n        });\n        i0.ɵɵtext(38, \"Reset\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(39, \"div\", 8)(40, \"label\")(41, \"input\", 17);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_input_ngModelChange_41_listener($event) {\n          return ctx.paceHours = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(42, \"-hrs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"label\")(44, \"input\", 18);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_input_ngModelChange_44_listener($event) {\n          return ctx.paceMinutes = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(45, \"-min\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"label\")(47, \"input\", 19);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_input_ngModelChange_47_listener($event) {\n          return ctx.paceSeconds = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(48, \"-sec\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"select\", 20);\n        i0.ɵɵlistener(\"ngModelChange\", function PaceComponent_Template_select_ngModelChange_49_listener($event) {\n          return ctx.paceType = $event;\n        })(\"change\", function PaceComponent_Template_select_change_49_listener($event) {\n          return ctx.convertPace($event);\n        });\n        i0.ɵɵelementStart(50, \"option\", 21);\n        i0.ɵɵtext(51, \"per Km\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(52, \"option\", 22);\n        i0.ɵɵtext(53, \"per Mile\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(54, \"div\", 23)(55, \"ul\");\n        i0.ɵɵtext(56);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(57, \"div\", 2)(58, \"div\", 3)(59, \"button\", 24);\n        i0.ɵɵlistener(\"click\", function PaceComponent_Template_button_click_59_listener() {\n          return ctx.calculate();\n        });\n        i0.ɵɵtext(60);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(61, \"span\", 25)(62, \"a\", 26);\n        i0.ɵɵlistener(\"click\", function PaceComponent_Template_a_click_62_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵtext(63, \"Reset\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngClass\", ctx.calcType == \"Time\" ? \"calcUse\" : \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.timeHours);\n        i0.ɵɵproperty(\"ngModel\", ctx.timeHours);\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.timeMinutes);\n        i0.ɵɵproperty(\"ngModel\", ctx.timeMinutes);\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.timeSeconds);\n        i0.ɵɵproperty(\"ngModel\", ctx.timeSeconds);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngClass\", ctx.calcType == \"Distance\" ? \"calcUse\" : \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.distance);\n        i0.ɵɵproperty(\"ngModel\", ctx.distance);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.distanceType);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.DISTANCE_OPTIONS);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngClass\", ctx.calcType == \"Pace\" ? \"calcUse\" : \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.paceHours);\n        i0.ɵɵproperty(\"ngModel\", ctx.paceHours);\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.paceMinutes);\n        i0.ɵɵproperty(\"ngModel\", ctx.paceMinutes);\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.paceSeconds);\n        i0.ɵɵproperty(\"ngModel\", ctx.paceSeconds);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"value\", ctx.paceType);\n        i0.ɵɵproperty(\"ngModel\", ctx.paceType);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\" \", ctx.errorMessage, \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" Calculate \", ctx.calcType, \" \");\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.MinValidator, i2.MaxValidator, i2.NgModel, i2.NgForm],\n    styles: [\"h1[_ngcontent-%COMP%]{font-family:Lato}\"]\n  });\n  return PaceComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}